<?php


namespace Tests\Feature;


use Mockery\MockInterface;
use Puntodev\MercadoPago\Facades\MercadoPago as MercadoPagoFacade;
use Puntodev\MercadoPago\MercadoPagoApi;
use Puntodev\Payables\Exceptions\InvalidGateway;
use Puntodev\Payables\PaymentOrder;
use Puntodev\Payables\Payments;
use Tests\TestCase;
use Tests\TestMerchant;
use Tests\TestPaymentOrder;

class PaymentsTest extends TestCase
{
    private Payments $payments;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->payments = new Payments();
    }

    public function test_fails_if_unknown_gateway()
    {
        $this->expectException(InvalidGateway::class);

        /** @var PaymentOrder $po */
        $po = new TestPaymentOrder();

        $this->payments->checkout('wrong', $po);
    }

    public function test_can_create_payment()
    {
        /** @var MercadoPagoApi| MockInterface $mock */
        $mock = $this->spy(MercadoPagoApi::class);

        MercadoPagoFacade::shouldReceive('withCredentials')
            ->with('some-client-id', 'some-client-secret')
            ->once()
            ->andReturn($mock);

        /** @var PaymentOrder $po */
        $po = new TestPaymentOrder();
        $merchant = new TestMerchant();

        $this->payments->checkout('mercado_pago', $po, $merchant);

        $mock->shouldHaveReceived('createPaymentPreference', [
            [
                'items' => [
                    0 =>
                        [
                            'title' => 'some item',
                            'quantity' => 1,
                            'unit_price' => 10.0,
                            'currency' => 'ARS',
                        ],
                ],
                'payer' => [
                    'name' => 'Max',
                    'surname' => 'Speed',
                    'email' => 'example@example.com',
                ],
                'payment_methods' => [],
                'notification_url' => 'https://www.example.com/notification',
                'external_reference' => 'b42f849e-90ad-4d7c-b9f6-e5bc2943b2b0',
                'back_urls' =>
                    [
                        'success' => 'https://www.example.com/success',
                        'pending' => 'https://www.example.com/pending',
                        'failure' => 'https://www.example.com/failure',
                    ],
                'auto_return' => 'all',
                'binary_mode' => true,
                'expires' => false,
            ]
        ]);
    }
}
